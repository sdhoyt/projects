{
  "hash": "d4fef3ccb33e08edd6cb8f08806450c9",
  "result": {
    "markdown": "---\ntitle: \"Cleaning WeRateDogs Twitter Data\"\ndescription: \"Udacity data wrangling project\"\nauthor: \"Sean Hoyt\"\ndate: \"4/5/2022\"\ncategories: [python, udacity, analysis, data-cleaning]\n---\n\n[Link to Github repository](https://github.com/sdhoyt/udacity-data-wrangling-project)\n\n# Project: Wrangling and Analyze Data\n\n## Data Gathering\n\nIn the cell below, gather **all** three pieces of data for this project and load them in the notebook. **Note:** the methods required to gather each data are different. 1. Directly download the WeRateDogs Twitter archive data (twitter_archive_enhanced.csv)\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport requests\nimport json\n```\n:::\n\n\n::: {.cell extensions='{\"jupyter_dashboards\":{\"version\":1,\"views\":{\"grid_default\":{\"hidden\":true},\"report_default\":{\"hidden\":true}}}}' execution_count=2}\n``` {.python .cell-code}\ntwitter_archive = pd.read_csv(\"twitter-archive-enhanced.csv\")\n```\n:::\n\n\n2.  Use the Requests library to download the tweet image prediction (image_predictions.tsv)\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimag_pred = requests.get(\"https://d17h27t6h515a5.cloudfront.net/topher/2017/August/599fd2ad_image-predictions/image-predictions.tsv\")\nwith open(\"image_predictions.tsv\", \"wb\") as f:\n    f.write(imag_pred.content)\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimage_predictions = pd.read_csv(\"image_predictions.tsv\", sep=\"\\t\")\n```\n:::\n\n\n3.  Use the Tweepy library to query additional data via the Twitter API (tweet_json.txt)\n\nThe code for the Twitter API is below, however it is commented out because I was not able to get the elevated privledges needed to use the API\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n#import tweepy\n#from tweepy import OAuthHandler\n#import json\n#from timeit import default_timer as timer\n#\n# Query Twitter API for each tweet in the Twitter archive and save JSON in a text file\n# These are hidden to comply with Twitter's API terms and conditions\n#consumer_key = 'HIDDEN'\n#consumer_secret = 'HIDDEN'\n#access_token = 'HIDDEN'\n#access_secret = 'HIDDEN'\n#\n#auth = OAuthHandler(consumer_key, consumer_secret)\n#auth.set_access_token(access_token, access_secret)\n#\n#api = tweepy.API(auth, wait_on_rate_limit=True)\n#\n# NOTE TO STUDENT WITH MOBILE VERIFICATION ISSUES:\n# df_1 is a DataFrame with the twitter_archive_enhanced.csv file. You may have to\n# change line 17 to match the name of your DataFrame with twitter_archive_enhanced.csv\n# NOTE TO REVIEWER: this student had mobile verification issues so the following\n# Twitter API code was sent to this student from a Udacity instructor\n# Tweet IDs for which to gather additional data via Twitter's API\n#tweet_ids = df_1.tweet_id.values\n#len(tweet_ids)\n\n# Query Twitter's API for JSON data for each tweet ID in the Twitter archive\n#count = 0\n#fails_dict = {}\n#start = timer()\n# Save each tweet's returned JSON as a new line in a .txt file\n#with open('tweet_json.txt', 'w') as outfile:\n#    # This loop will likely take 20-30 minutes to run because of Twitter's rate limit\n#    for tweet_id in tweet_ids:\n#        count += 1\n#        print(str(count) + \": \" + str(tweet_id))\n#        try:\n#            tweet = api.get_status(tweet_id, tweet_mode='extended')\n#            print(\"Success\")\n#            json.dump(tweet._json, outfile)\n#            outfile.write('\\n')\n#        except tweepy.TweepError as e:\n#            print(\"Fail\")\n#            fails_dict[tweet_id] = e\n#            pass\n#end = timer()\n#print(end - start)\n#print(fails_dict)\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntweets = requests.get('https://video.udacity-data.com/topher/2018/November/5be5fb7d_tweet-json/tweet-json.txt')\nwith open('tweet_json.txt', 'wb') as f:\n        f.write(tweets.content)\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntweet_data = pd.read_json('tweet_json.txt', lines=True)\n```\n:::\n\n\n## Assessing Data\n\nIn this section, detect and document at least **eight (8) quality issues and two (2) tidiness issue**. You must use **both** visual assessment programmatic assessement to assess the data.\n\n**Note:** pay attention to the following key points when you access the data.\n\n-   You only want original ratings (no retweets) that have images. Though there are 5000+ tweets in the dataset, not all are dog ratings and some are retweets.\n-   Assessing and cleaning the entire dataset completely would require a lot of time, and is not necessary to practice and demonstrate your skills in data wrangling. Therefore, the requirements of this project are only to assess and clean at least 8 quality issues and at least 2 tidiness issues in this dataset.\n-   The fact that the rating numerators are greater than the denominators does not need to be cleaned. This [unique rating system](http://knowyourmeme.com/memes/theyre-good-dogs-brent) is a big part of the popularity of WeRateDogs.\n-   You do not need to gather the tweets beyond August 1st, 2017. You can, but note that you won't be able to gather the image predictions for these tweets since you don't have access to the algorithm used.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ntwitter_archive.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tweet_id</th>\n      <th>in_reply_to_status_id</th>\n      <th>in_reply_to_user_id</th>\n      <th>timestamp</th>\n      <th>source</th>\n      <th>text</th>\n      <th>retweeted_status_id</th>\n      <th>retweeted_status_user_id</th>\n      <th>retweeted_status_timestamp</th>\n      <th>expanded_urls</th>\n      <th>rating_numerator</th>\n      <th>rating_denominator</th>\n      <th>name</th>\n      <th>doggo</th>\n      <th>floofer</th>\n      <th>pupper</th>\n      <th>puppo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892420643555336193</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-08-01 16:23:56 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/dog_rates/status/892420643...</td>\n      <td>13</td>\n      <td>10</td>\n      <td>Phineas</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>892177421306343426</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-08-01 00:17:27 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>This is Tilly. She's just checking pup on you....</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/dog_rates/status/892177421...</td>\n      <td>13</td>\n      <td>10</td>\n      <td>Tilly</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>891815181378084864</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-07-31 00:18:03 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/dog_rates/status/891815181...</td>\n      <td>12</td>\n      <td>10</td>\n      <td>Archie</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>891689557279858688</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-07-30 15:58:51 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>This is Darla. She commenced a snooze mid meal...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/dog_rates/status/891689557...</td>\n      <td>13</td>\n      <td>10</td>\n      <td>Darla</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>891327558926688256</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-07-29 16:00:24 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>This is Franklin. He would like you to stop ca...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/dog_rates/status/891327558...</td>\n      <td>12</td>\n      <td>10</td>\n      <td>Franklin</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLooks like I can use when retweeted_status_id is not null to determine which tweets are retweets. We do not want retweets in this dataset.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ntwitter_archive.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2356 entries, 0 to 2355\nData columns (total 17 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   tweet_id                    2356 non-null   int64  \n 1   in_reply_to_status_id       78 non-null     float64\n 2   in_reply_to_user_id         78 non-null     float64\n 3   timestamp                   2356 non-null   object \n 4   source                      2356 non-null   object \n 5   text                        2356 non-null   object \n 6   retweeted_status_id         181 non-null    float64\n 7   retweeted_status_user_id    181 non-null    float64\n 8   retweeted_status_timestamp  181 non-null    object \n 9   expanded_urls               2297 non-null   object \n 10  rating_numerator            2356 non-null   int64  \n 11  rating_denominator          2356 non-null   int64  \n 12  name                        2356 non-null   object \n 13  doggo                       2356 non-null   object \n 14  floofer                     2356 non-null   object \n 15  pupper                      2356 non-null   object \n 16  puppo                       2356 non-null   object \ndtypes: float64(4), int64(3), object(10)\nmemory usage: 313.0+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntwitter_archive[twitter_archive.retweeted_status_id.notnull()].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tweet_id</th>\n      <th>in_reply_to_status_id</th>\n      <th>in_reply_to_user_id</th>\n      <th>timestamp</th>\n      <th>source</th>\n      <th>text</th>\n      <th>retweeted_status_id</th>\n      <th>retweeted_status_user_id</th>\n      <th>retweeted_status_timestamp</th>\n      <th>expanded_urls</th>\n      <th>rating_numerator</th>\n      <th>rating_denominator</th>\n      <th>name</th>\n      <th>doggo</th>\n      <th>floofer</th>\n      <th>pupper</th>\n      <th>puppo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>19</th>\n      <td>888202515573088257</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-07-21 01:02:36 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>RT @dog_rates: This is Canela. She attempted s...</td>\n      <td>8.874740e+17</td>\n      <td>4.196984e+09</td>\n      <td>2017-07-19 00:47:34 +0000</td>\n      <td>https://twitter.com/dog_rates/status/887473957...</td>\n      <td>13</td>\n      <td>10</td>\n      <td>Canela</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>886054160059072513</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-07-15 02:45:48 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>RT @Athletics: 12/10 #BATP https://t.co/WxwJmv...</td>\n      <td>8.860537e+17</td>\n      <td>1.960740e+07</td>\n      <td>2017-07-15 02:44:07 +0000</td>\n      <td>https://twitter.com/dog_rates/status/886053434...</td>\n      <td>12</td>\n      <td>10</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>885311592912609280</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-07-13 01:35:06 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>RT @dog_rates: This is Lilly. She just paralle...</td>\n      <td>8.305833e+17</td>\n      <td>4.196984e+09</td>\n      <td>2017-02-12 01:04:29 +0000</td>\n      <td>https://twitter.com/dog_rates/status/830583320...</td>\n      <td>13</td>\n      <td>10</td>\n      <td>Lilly</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>879130579576475649</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-06-26 00:13:58 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>RT @dog_rates: This is Emmy. She was adopted t...</td>\n      <td>8.780576e+17</td>\n      <td>4.196984e+09</td>\n      <td>2017-06-23 01:10:23 +0000</td>\n      <td>https://twitter.com/dog_rates/status/878057613...</td>\n      <td>14</td>\n      <td>10</td>\n      <td>Emmy</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>878404777348136964</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-06-24 00:09:53 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>RT @dog_rates: Meet Shadow. In an attempt to r...</td>\n      <td>8.782815e+17</td>\n      <td>4.196984e+09</td>\n      <td>2017-06-23 16:00:04 +0000</td>\n      <td>https://www.gofundme.com/3yd6y1c,https://twitt...</td>\n      <td>13</td>\n      <td>10</td>\n      <td>Shadow</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLooks like doggo, floofer, pupper, puppo are different \"types\" of dogs.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntwitter_archive[twitter_archive.doggo != \"None\"].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tweet_id</th>\n      <th>in_reply_to_status_id</th>\n      <th>in_reply_to_user_id</th>\n      <th>timestamp</th>\n      <th>source</th>\n      <th>text</th>\n      <th>retweeted_status_id</th>\n      <th>retweeted_status_user_id</th>\n      <th>retweeted_status_timestamp</th>\n      <th>expanded_urls</th>\n      <th>rating_numerator</th>\n      <th>rating_denominator</th>\n      <th>name</th>\n      <th>doggo</th>\n      <th>floofer</th>\n      <th>pupper</th>\n      <th>puppo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>890240255349198849</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-07-26 15:59:51 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>This is Cassie. She is a college pup. Studying...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/dog_rates/status/890240255...</td>\n      <td>14</td>\n      <td>10</td>\n      <td>Cassie</td>\n      <td>doggo</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>884162670584377345</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-07-09 21:29:42 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>Meet Yogi. He doesn't have any important dog m...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/dog_rates/status/884162670...</td>\n      <td>12</td>\n      <td>10</td>\n      <td>Yogi</td>\n      <td>doggo</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>872967104147763200</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-06-09 00:02:31 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>Here's a very large dog. He has a date later. ...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/dog_rates/status/872967104...</td>\n      <td>12</td>\n      <td>10</td>\n      <td>None</td>\n      <td>doggo</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>108</th>\n      <td>871515927908634625</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-06-04 23:56:03 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>This is Napolean. He's a Raggedy East Nicaragu...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/dog_rates/status/871515927...</td>\n      <td>12</td>\n      <td>10</td>\n      <td>Napolean</td>\n      <td>doggo</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>110</th>\n      <td>871102520638267392</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-06-03 20:33:19 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>Never doubt a doggo 14/10 https://t.co/AbBLh2FZCH</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://twitter.com/animalcog/status/871075758...</td>\n      <td>14</td>\n      <td>10</td>\n      <td>None</td>\n      <td>doggo</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nimage_predictions.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2075 entries, 0 to 2074\nData columns (total 12 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   tweet_id  2075 non-null   int64  \n 1   jpg_url   2075 non-null   object \n 2   img_num   2075 non-null   int64  \n 3   p1        2075 non-null   object \n 4   p1_conf   2075 non-null   float64\n 5   p1_dog    2075 non-null   bool   \n 6   p2        2075 non-null   object \n 7   p2_conf   2075 non-null   float64\n 8   p2_dog    2075 non-null   bool   \n 9   p3        2075 non-null   object \n 10  p3_conf   2075 non-null   float64\n 11  p3_dog    2075 non-null   bool   \ndtypes: bool(3), float64(3), int64(2), object(4)\nmemory usage: 152.1+ KB\n```\n:::\n:::\n\n\nLooks like the dog breeds and other obejcts appear multiple times. These could be considered categories\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nimage_predictions.p3.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nLabrador_retriever    79\nChihuahua             58\ngolden_retriever      48\nEskimo_dog            38\nkelpie                35\n                      ..\nox                     1\nassault_rifle          1\naxolotl                1\npot                    1\nbanana                 1\nName: p3, Length: 408, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimage_predictions[image_predictions['p2_dog'] == False]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tweet_id</th>\n      <th>jpg_url</th>\n      <th>img_num</th>\n      <th>p1</th>\n      <th>p1_conf</th>\n      <th>p1_dog</th>\n      <th>p2</th>\n      <th>p2_conf</th>\n      <th>p2_dog</th>\n      <th>p3</th>\n      <th>p3_conf</th>\n      <th>p3_dog</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>666051853826850816</td>\n      <td>https://pbs.twimg.com/media/CT5KoJ1WoAAJash.jpg</td>\n      <td>1</td>\n      <td>box_turtle</td>\n      <td>0.933012</td>\n      <td>False</td>\n      <td>mud_turtle</td>\n      <td>0.045885</td>\n      <td>False</td>\n      <td>terrapin</td>\n      <td>0.017885</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>666057090499244032</td>\n      <td>https://pbs.twimg.com/media/CT5PY90WoAAQGLo.jpg</td>\n      <td>1</td>\n      <td>shopping_cart</td>\n      <td>0.962465</td>\n      <td>False</td>\n      <td>shopping_basket</td>\n      <td>0.014594</td>\n      <td>False</td>\n      <td>golden_retriever</td>\n      <td>0.007959</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>666104133288665088</td>\n      <td>https://pbs.twimg.com/media/CT56LSZWoAAlJj2.jpg</td>\n      <td>1</td>\n      <td>hen</td>\n      <td>0.965932</td>\n      <td>False</td>\n      <td>cock</td>\n      <td>0.033919</td>\n      <td>False</td>\n      <td>partridge</td>\n      <td>0.000052</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>666268910803644416</td>\n      <td>https://pbs.twimg.com/media/CT8QCd1WEAADXws.jpg</td>\n      <td>1</td>\n      <td>desktop_computer</td>\n      <td>0.086502</td>\n      <td>False</td>\n      <td>desk</td>\n      <td>0.085547</td>\n      <td>False</td>\n      <td>bookcase</td>\n      <td>0.079480</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>666293911632134144</td>\n      <td>https://pbs.twimg.com/media/CT8mx7KW4AEQu8N.jpg</td>\n      <td>1</td>\n      <td>three-toed_sloth</td>\n      <td>0.914671</td>\n      <td>False</td>\n      <td>otter</td>\n      <td>0.015250</td>\n      <td>False</td>\n      <td>great_grey_owl</td>\n      <td>0.013207</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2044</th>\n      <td>886258384151887873</td>\n      <td>https://pbs.twimg.com/media/DEyfTG4UMAE4aE9.jpg</td>\n      <td>1</td>\n      <td>pug</td>\n      <td>0.943575</td>\n      <td>True</td>\n      <td>shower_cap</td>\n      <td>0.025286</td>\n      <td>False</td>\n      <td>Siamese_cat</td>\n      <td>0.002849</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2046</th>\n      <td>886680336477933568</td>\n      <td>https://pbs.twimg.com/media/DE4fEDzWAAAyHMM.jpg</td>\n      <td>1</td>\n      <td>convertible</td>\n      <td>0.738995</td>\n      <td>False</td>\n      <td>sports_car</td>\n      <td>0.139952</td>\n      <td>False</td>\n      <td>car_wheel</td>\n      <td>0.044173</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2050</th>\n      <td>887343217045368832</td>\n      <td>https://pbs.twimg.com/ext_tw_video_thumb/88734...</td>\n      <td>1</td>\n      <td>Mexican_hairless</td>\n      <td>0.330741</td>\n      <td>True</td>\n      <td>sea_lion</td>\n      <td>0.275645</td>\n      <td>False</td>\n      <td>Weimaraner</td>\n      <td>0.134203</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2052</th>\n      <td>887517139158093824</td>\n      <td>https://pbs.twimg.com/ext_tw_video_thumb/88751...</td>\n      <td>1</td>\n      <td>limousine</td>\n      <td>0.130432</td>\n      <td>False</td>\n      <td>tow_truck</td>\n      <td>0.029175</td>\n      <td>False</td>\n      <td>shopping_cart</td>\n      <td>0.026321</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2074</th>\n      <td>892420643555336193</td>\n      <td>https://pbs.twimg.com/media/DGKD1-bXoAAIAUK.jpg</td>\n      <td>1</td>\n      <td>orange</td>\n      <td>0.097049</td>\n      <td>False</td>\n      <td>bagel</td>\n      <td>0.085851</td>\n      <td>False</td>\n      <td>banana</td>\n      <td>0.076110</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>522 rows × 12 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ntweet_data.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2354 entries, 0 to 2353\nData columns (total 31 columns):\n #   Column                         Non-Null Count  Dtype              \n---  ------                         --------------  -----              \n 0   created_at                     2354 non-null   datetime64[ns, UTC]\n 1   id                             2354 non-null   int64              \n 2   id_str                         2354 non-null   int64              \n 3   full_text                      2354 non-null   object             \n 4   truncated                      2354 non-null   bool               \n 5   display_text_range             2354 non-null   object             \n 6   entities                       2354 non-null   object             \n 7   extended_entities              2073 non-null   object             \n 8   source                         2354 non-null   object             \n 9   in_reply_to_status_id          78 non-null     float64            \n 10  in_reply_to_status_id_str      78 non-null     float64            \n 11  in_reply_to_user_id            78 non-null     float64            \n 12  in_reply_to_user_id_str        78 non-null     float64            \n 13  in_reply_to_screen_name        78 non-null     object             \n 14  user                           2354 non-null   object             \n 15  geo                            0 non-null      float64            \n 16  coordinates                    0 non-null      float64            \n 17  place                          1 non-null      object             \n 18  contributors                   0 non-null      float64            \n 19  is_quote_status                2354 non-null   bool               \n 20  retweet_count                  2354 non-null   int64              \n 21  favorite_count                 2354 non-null   int64              \n 22  favorited                      2354 non-null   bool               \n 23  retweeted                      2354 non-null   bool               \n 24  possibly_sensitive             2211 non-null   float64            \n 25  possibly_sensitive_appealable  2211 non-null   float64            \n 26  lang                           2354 non-null   object             \n 27  retweeted_status               179 non-null    object             \n 28  quoted_status_id               29 non-null     float64            \n 29  quoted_status_id_str           29 non-null     float64            \n 30  quoted_status                  28 non-null     object             \ndtypes: bool(4), datetime64[ns, UTC](1), float64(11), int64(4), object(11)\nmemory usage: 505.9+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntwitter_archive.name\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n0        Phineas\n1          Tilly\n2         Archie\n3          Darla\n4       Franklin\n          ...   \n2351        None\n2352           a\n2353           a\n2354           a\n2355        None\nName: name, Length: 2356, dtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ntweet_data.id\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n0       892420643555336193\n1       892177421306343426\n2       891815181378084864\n3       891689557279858688\n4       891327558926688256\n               ...        \n2349    666049248165822465\n2350    666044226329800704\n2351    666033412701032449\n2352    666029285002620928\n2353    666020888022790149\nName: id, Length: 2354, dtype: int64\n```\n:::\n:::\n\n\n### Quality issues\n\n1.  There are retweets in the dataset\n\n2.  twitter archive timestamp is a string not a time\n\n3.  image prediction p1, p2, p3 are strings, not categories\n\n4.  all tweet ids are ints, but is not useful mathematically\n\n5.  the twitter archive source column has html in it.\n\n6.  The source column seems categorical, but is a string.\n\n7.  Some dog beeds in the image predictions are lower case and some are upper case\n\n8.  Some of the dog names in tweet_data are not names (\"None\", \"the\", \"a\")\n\n### Tidiness issues\n\n1.  doggo, floofer pupper, puppo are columns rather than values in a single column.\n\n2.  The tweet archive and tweet data are separate tables\n\n## Cleaning Data\n\nIn this section, clean **all** of the issues you documented while assessing.\n\n**Note:** Make a copy of the original data before cleaning. Cleaning includes merging individual pieces of data according to the rules of [tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html). The result should be a high-quality and tidy master pandas DataFrame (or DataFrames, if appropriate).\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Make copies of original pieces of data\ntwitter_archive_clean = twitter_archive.copy()\ntweet_data_clean = tweet_data.copy()\nimage_predictions_clean = image_predictions.copy()\n```\n:::\n\n\n### Issue #1:\n\n#### The tweet id and id are integers, but they are not useful mathematically in any way. Because these are references/identifiers for the tweets, they should be strings. We will change each tweet id to a string.\n\n#### Code\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntwitter_archive_clean.tweet_id = twitter_archive_clean.tweet_id.astype(str)\ntweet_data_clean.id = tweet_data_clean.id.astype(str)\nimage_predictions_clean.tweet_id = image_predictions_clean.tweet_id.astype(str)\n```\n:::\n\n\n#### Test\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nassert twitter_archive_clean.tweet_id.dtype == pd.Series(dtype=str).dtype\nassert tweet_data_clean.id.dtype == pd.Series(dtype=str).dtype\nassert image_predictions_clean.tweet_id.dtype == pd.Series(dtype=str).dtype\n```\n:::\n\n\n### Issue #2:\n\n#### The tweet archive and tweet data are separate tables. These should be combined into one so we have one table containing all of the twitter data.\n\n#### Code\n\nChange the name of the id column in twee_data from id to tweet_id to help with the merge.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ntweet_data_clean.rename(columns={\"id\":\"tweet_id\"}, inplace=True)\n```\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ntweet_data_clean.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2354 entries, 0 to 2353\nData columns (total 31 columns):\n #   Column                         Non-Null Count  Dtype              \n---  ------                         --------------  -----              \n 0   created_at                     2354 non-null   datetime64[ns, UTC]\n 1   tweet_id                       2354 non-null   object             \n 2   id_str                         2354 non-null   int64              \n 3   full_text                      2354 non-null   object             \n 4   truncated                      2354 non-null   bool               \n 5   display_text_range             2354 non-null   object             \n 6   entities                       2354 non-null   object             \n 7   extended_entities              2073 non-null   object             \n 8   source                         2354 non-null   object             \n 9   in_reply_to_status_id          78 non-null     float64            \n 10  in_reply_to_status_id_str      78 non-null     float64            \n 11  in_reply_to_user_id            78 non-null     float64            \n 12  in_reply_to_user_id_str        78 non-null     float64            \n 13  in_reply_to_screen_name        78 non-null     object             \n 14  user                           2354 non-null   object             \n 15  geo                            0 non-null      float64            \n 16  coordinates                    0 non-null      float64            \n 17  place                          1 non-null      object             \n 18  contributors                   0 non-null      float64            \n 19  is_quote_status                2354 non-null   bool               \n 20  retweet_count                  2354 non-null   int64              \n 21  favorite_count                 2354 non-null   int64              \n 22  favorited                      2354 non-null   bool               \n 23  retweeted                      2354 non-null   bool               \n 24  possibly_sensitive             2211 non-null   float64            \n 25  possibly_sensitive_appealable  2211 non-null   float64            \n 26  lang                           2354 non-null   object             \n 27  retweeted_status               179 non-null    object             \n 28  quoted_status_id               29 non-null     float64            \n 29  quoted_status_id_str           29 non-null     float64            \n 30  quoted_status                  28 non-null     object             \ndtypes: bool(4), datetime64[ns, UTC](1), float64(11), int64(3), object(12)\nmemory usage: 505.9+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ntwitter_archive_clean.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2356 entries, 0 to 2355\nData columns (total 17 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   tweet_id                    2356 non-null   object \n 1   in_reply_to_status_id       78 non-null     float64\n 2   in_reply_to_user_id         78 non-null     float64\n 3   timestamp                   2356 non-null   object \n 4   source                      2356 non-null   object \n 5   text                        2356 non-null   object \n 6   retweeted_status_id         181 non-null    float64\n 7   retweeted_status_user_id    181 non-null    float64\n 8   retweeted_status_timestamp  181 non-null    object \n 9   expanded_urls               2297 non-null   object \n 10  rating_numerator            2356 non-null   int64  \n 11  rating_denominator          2356 non-null   int64  \n 12  name                        2356 non-null   object \n 13  doggo                       2356 non-null   object \n 14  floofer                     2356 non-null   object \n 15  pupper                      2356 non-null   object \n 16  puppo                       2356 non-null   object \ndtypes: float64(4), int64(2), object(11)\nmemory usage: 313.0+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nfull_tweet_data_clean = pd.merge(twitter_archive_clean, tweet_data_clean[[\"tweet_id\", \"retweet_count\", \"favorite_count\"]], on=\"tweet_id\", how=\"left\")\n```\n:::\n\n\nThere are two tweets from the twitter_archive_clean that were not present in the tweet_data_clean, however, these tweets are retweets, so the will soon be removed and we can ignore them for now.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nfull_tweet_data_clean[full_tweet_data_clean.favorite_count.isnull()]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tweet_id</th>\n      <th>in_reply_to_status_id</th>\n      <th>in_reply_to_user_id</th>\n      <th>timestamp</th>\n      <th>source</th>\n      <th>text</th>\n      <th>retweeted_status_id</th>\n      <th>retweeted_status_user_id</th>\n      <th>retweeted_status_timestamp</th>\n      <th>expanded_urls</th>\n      <th>rating_numerator</th>\n      <th>rating_denominator</th>\n      <th>name</th>\n      <th>doggo</th>\n      <th>floofer</th>\n      <th>pupper</th>\n      <th>puppo</th>\n      <th>retweet_count</th>\n      <th>favorite_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>19</th>\n      <td>888202515573088257</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2017-07-21 01:02:36 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>RT @dog_rates: This is Canela. She attempted s...</td>\n      <td>8.874740e+17</td>\n      <td>4.196984e+09</td>\n      <td>2017-07-19 00:47:34 +0000</td>\n      <td>https://twitter.com/dog_rates/status/887473957...</td>\n      <td>13</td>\n      <td>10</td>\n      <td>Canela</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>815</th>\n      <td>771004394259247104</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2016-08-31 15:19:06 +0000</td>\n      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n      <td>RT @katieornah: @dog_rates learning a lot at c...</td>\n      <td>7.710021e+17</td>\n      <td>1.732729e+09</td>\n      <td>2016-08-31 15:10:07 +0000</td>\n      <td>https://twitter.com/katieornah/status/77100213...</td>\n      <td>12</td>\n      <td>10</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>pupper</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Test\n\nWe can see from .info() that the tables were merged.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nfull_tweet_data_clean.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 2356 entries, 0 to 2355\nData columns (total 19 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   tweet_id                    2356 non-null   object \n 1   in_reply_to_status_id       78 non-null     float64\n 2   in_reply_to_user_id         78 non-null     float64\n 3   timestamp                   2356 non-null   object \n 4   source                      2356 non-null   object \n 5   text                        2356 non-null   object \n 6   retweeted_status_id         181 non-null    float64\n 7   retweeted_status_user_id    181 non-null    float64\n 8   retweeted_status_timestamp  181 non-null    object \n 9   expanded_urls               2297 non-null   object \n 10  rating_numerator            2356 non-null   int64  \n 11  rating_denominator          2356 non-null   int64  \n 12  name                        2356 non-null   object \n 13  doggo                       2356 non-null   object \n 14  floofer                     2356 non-null   object \n 15  pupper                      2356 non-null   object \n 16  puppo                       2356 non-null   object \n 17  retweet_count               2354 non-null   float64\n 18  favorite_count              2354 non-null   float64\ndtypes: float64(6), int64(2), object(11)\nmemory usage: 368.1+ KB\n```\n:::\n:::\n\n\n### Issue #3:\n\n#### The retweets in the dataset should be removed because we only care about dog rating tweets.\n\n#### Code\n\nWe can use the retweeted_status_id column to help remove any retweets. If this column is not null, then it is a retweet.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nfull_tweet_data_clean = full_tweet_data_clean[full_tweet_data_clean.retweeted_status_id.isnull()]\n```\n:::\n\n\n#### Test\n\ntest to ensure that every value in retweeted_status_id is null (meaning none are retweets)\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nassert all(full_tweet_data_clean.retweeted_status_id.isnull())\n```\n:::\n\n\n### Issue #4:\n\n#### the timestamp is a string, not a time. This should be converted to a time object\n\n#### Code\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nfull_tweet_data_clean.timestamp = pd.to_datetime(full_tweet_data_clean.timestamp)\n```\n:::\n\n\n#### Test\n\nWe can see from .info() that the timestamp column is now a datetime.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nfull_tweet_data_clean.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 2175 entries, 0 to 2355\nData columns (total 19 columns):\n #   Column                      Non-Null Count  Dtype              \n---  ------                      --------------  -----              \n 0   tweet_id                    2175 non-null   object             \n 1   in_reply_to_status_id       78 non-null     float64            \n 2   in_reply_to_user_id         78 non-null     float64            \n 3   timestamp                   2175 non-null   datetime64[ns, UTC]\n 4   source                      2175 non-null   object             \n 5   text                        2175 non-null   object             \n 6   retweeted_status_id         0 non-null      float64            \n 7   retweeted_status_user_id    0 non-null      float64            \n 8   retweeted_status_timestamp  0 non-null      object             \n 9   expanded_urls               2117 non-null   object             \n 10  rating_numerator            2175 non-null   int64              \n 11  rating_denominator          2175 non-null   int64              \n 12  name                        2175 non-null   object             \n 13  doggo                       2175 non-null   object             \n 14  floofer                     2175 non-null   object             \n 15  pupper                      2175 non-null   object             \n 16  puppo                       2175 non-null   object             \n 17  retweet_count               2175 non-null   float64            \n 18  favorite_count              2175 non-null   float64            \ndtypes: datetime64[ns, UTC](1), float64(6), int64(2), object(10)\nmemory usage: 339.8+ KB\n```\n:::\n:::\n\n\n### Issue #5\n\n#### the image predictions p1, p2, p3 should be converted from strings to categories\n\n#### Code\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nimage_predictions_clean.p1 = image_predictions_clean.p1.astype('category')\nimage_predictions_clean.p2 = image_predictions_clean.p2.astype('category')\nimage_predictions_clean.p3 = image_predictions_clean.p3.astype('category')\n```\n:::\n\n\n#### Test\n\nThe p1, p2, p3 columsn are now of type category\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nimage_predictions_clean.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2075 entries, 0 to 2074\nData columns (total 12 columns):\n #   Column    Non-Null Count  Dtype   \n---  ------    --------------  -----   \n 0   tweet_id  2075 non-null   object  \n 1   jpg_url   2075 non-null   object  \n 2   img_num   2075 non-null   int64   \n 3   p1        2075 non-null   category\n 4   p1_conf   2075 non-null   float64 \n 5   p1_dog    2075 non-null   bool    \n 6   p2        2075 non-null   category\n 7   p2_conf   2075 non-null   float64 \n 8   p2_dog    2075 non-null   bool    \n 9   p3        2075 non-null   category\n 10  p3_conf   2075 non-null   float64 \n 11  p3_dog    2075 non-null   bool    \ndtypes: bool(3), category(3), float64(3), int64(1), object(2)\nmemory usage: 165.4+ KB\n```\n:::\n:::\n\n\n### Issue #6\n\n#### the source column should have the html removed and the source converted to a cateogory\n\n#### Code\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nfull_tweet_data_clean.source[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n'<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>'\n```\n:::\n:::\n\n\nUsing a regular expression to get the text inside the html tag in the source column (regex source: https://stackoverflow.com/questions/33120584/python-regex-find-string-between-html-tags)\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nfull_tweet_data_clean[\"source\"] = full_tweet_data_clean.source.str.extract(r'>(.+?)<')\n```\n:::\n\n\n#### Test\n\nWe can get the value_counts for the source column to confirm that the sources were properly extracted from the html tag.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nfull_tweet_data_clean.source.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nTwitter for iPhone     2042\nVine - Make a Scene      91\nTwitter Web Client       31\nTweetDeck                11\nName: source, dtype: int64\n```\n:::\n:::\n\n\n### Issue #7\n\n#### The source column is a string, but should be converted to a category.\n\n#### Code\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nfull_tweet_data_clean.source = full_tweet_data_clean.source.astype('category')\n```\n:::\n\n\n#### Test\n\nWe can use .info() to confirm that the source column has been converted to a category\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nfull_tweet_data_clean.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 2175 entries, 0 to 2355\nData columns (total 19 columns):\n #   Column                      Non-Null Count  Dtype              \n---  ------                      --------------  -----              \n 0   tweet_id                    2175 non-null   object             \n 1   in_reply_to_status_id       78 non-null     float64            \n 2   in_reply_to_user_id         78 non-null     float64            \n 3   timestamp                   2175 non-null   datetime64[ns, UTC]\n 4   source                      2175 non-null   category           \n 5   text                        2175 non-null   object             \n 6   retweeted_status_id         0 non-null      float64            \n 7   retweeted_status_user_id    0 non-null      float64            \n 8   retweeted_status_timestamp  0 non-null      object             \n 9   expanded_urls               2117 non-null   object             \n 10  rating_numerator            2175 non-null   int64              \n 11  rating_denominator          2175 non-null   int64              \n 12  name                        2175 non-null   object             \n 13  doggo                       2175 non-null   object             \n 14  floofer                     2175 non-null   object             \n 15  pupper                      2175 non-null   object             \n 16  puppo                       2175 non-null   object             \n 17  retweet_count               2175 non-null   float64            \n 18  favorite_count              2175 non-null   float64            \ndtypes: category(1), datetime64[ns, UTC](1), float64(6), int64(2), object(9)\nmemory usage: 389.7+ KB\n```\n:::\n:::\n\n\n### Issue #8\n\n#### Some dog beeds in the image predictions are lower case and some are upper case. These should be changed to all lower case for consistency.\n\n#### Code\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nimage_predictions_clean.p1 = image_predictions_clean.p1.str.lower()\nimage_predictions_clean.p2 = image_predictions_clean.p2.str.lower()\nimage_predictions_clean.p3 = image_predictions_clean.p3.str.lower()\n```\n:::\n\n\n#### Test\n\n.islower() returns True if all characters are lower case and false if at least one is not lower case. Using this method, we can confirm that all were converted to lower.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nassert all(image_predictions_clean.p1.str.islower())\n```\n:::\n\n\n### Issue #9\n\n#### Some of the dog names in tweet_data are not names (\"None\", \"the\", \"a\"). These should all be made null to indicate that there is no name available.\n\n#### Code\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nfull_tweet_data_clean.name = full_tweet_data_clean.name.replace([\"None\", \"a\", \"an\", \"the\", \"quite\"], np.nan)\n```\n:::\n\n\n#### Test\n\nLooking at value counts and some samples, we can check to make sure these values are gone. This doesn't necesarrily mean that all non-names are gone, but it looks like we removed the bulk of the issue and we can iterate and remove more later if more are found.\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nfull_tweet_data_clean.name.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\nCharlie       11\nLucy          11\nOliver        10\nCooper        10\nTucker         9\n              ..\nWishes         1\nRose           1\nTheo           1\nFido           1\nChristoper     1\nName: name, Length: 951, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nfull_tweet_data_clean.name.sample(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n542     incredibly\n1686           NaN\n414         Hobbes\n2175       Jaspers\n649            NaN\n1777           NaN\n116         Rumble\n2191           NaN\n2312         Josep\n1183          Otis\nName: name, dtype: object\n```\n:::\n:::\n\n\n### Issue #10\n\n#### doggo, floofer pupper, puppo are columns rather than values in a single column. There should be a single column containing each type.\n\n#### Code\n\nFirst we'll replace all the None values with empty strings to help with concatenating the column text\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nfull_tweet_data_clean[\"doggo\"] = full_tweet_data_clean[\"doggo\"].replace(\"None\", \"\")\nfull_tweet_data_clean[\"floofer\"] = full_tweet_data_clean[\"floofer\"].replace(\"None\", \"\")\nfull_tweet_data_clean[\"pupper\"] = full_tweet_data_clean[\"pupper\"].replace(\"None\", \"\")\nfull_tweet_data_clean[\"puppo\"] = full_tweet_data_clean[\"puppo\"].replace(\"None\", \"\")\n```\n:::\n\n\nThen we'll concatentate all the columns into a new columns called dog_stage\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nfull_tweet_data_clean[\"dog_stage\"] = full_tweet_data_clean.doggo.map(str) + full_tweet_data_clean.floofer.map(str) + full_tweet_data_clean.pupper.map(str) + full_tweet_data_clean.puppo.map(str)\n```\n:::\n\n\nThen we'll go back and replace the empty strings back to nans\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nfull_tweet_data_clean[\"dog_stage\"] = full_tweet_data_clean[\"dog_stage\"].replace(\"\", np.nan)\n```\n:::\n\n\nThen drop the old columns\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nfull_tweet_data_clean.drop(columns=[\"doggo\", \"floofer\", \"pupper\", \"puppo\"], inplace=True)\n```\n:::\n\n\nFrom the value counts we can see that there are a few instances of different stages in the same observations. We can make the convention that any conflicts containing the doggo stage will be resolved by using the doggo stage.\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nfull_tweet_data_clean.dog_stage.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\npupper          224\ndoggo            75\npuppo            24\ndoggopupper      10\nfloofer           9\ndoggopuppo        1\ndoggofloofer      1\nName: dog_stage, dtype: int64\n```\n:::\n:::\n\n\nUsing a regular expression, we can replace the values that start with doggo, to only use the doggo type.\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nfull_tweet_data_clean.dog_stage = full_tweet_data_clean.dog_stage.replace(r'doggo\\w+', 'doggo', regex=True)\n```\n:::\n\n\nWe can then convert this column to be of category type.\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nfull_tweet_data_clean.dog_stage = full_tweet_data_clean.dog_stage.astype('category')\n```\n:::\n\n\n#### Test\n\nWe can use .info() to check that the old columns were removed, the new column exists and it is a category type\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nfull_tweet_data_clean.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 2175 entries, 0 to 2355\nData columns (total 16 columns):\n #   Column                      Non-Null Count  Dtype              \n---  ------                      --------------  -----              \n 0   tweet_id                    2175 non-null   object             \n 1   in_reply_to_status_id       78 non-null     float64            \n 2   in_reply_to_user_id         78 non-null     float64            \n 3   timestamp                   2175 non-null   datetime64[ns, UTC]\n 4   source                      2175 non-null   category           \n 5   text                        2175 non-null   object             \n 6   retweeted_status_id         0 non-null      float64            \n 7   retweeted_status_user_id    0 non-null      float64            \n 8   retweeted_status_timestamp  0 non-null      object             \n 9   expanded_urls               2117 non-null   object             \n 10  rating_numerator            2175 non-null   int64              \n 11  rating_denominator          2175 non-null   int64              \n 12  name                        1423 non-null   object             \n 13  retweet_count               2175 non-null   float64            \n 14  favorite_count              2175 non-null   float64            \n 15  dog_stage                   344 non-null    category           \ndtypes: category(2), datetime64[ns, UTC](1), float64(6), int64(2), object(5)\nmemory usage: 324.1+ KB\n```\n:::\n:::\n\n\nThen we can use value_counts to make sure the correct values are being used in the dog_stage column\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nfull_tweet_data_clean.dog_stage.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\npupper     224\ndoggo       87\npuppo       24\nfloofer      9\nName: dog_stage, dtype: int64\n```\n:::\n:::\n\n\n## Storing Data\n\nSave gathered, assessed, and cleaned master dataset to a CSV file named \"twitter_archive_master.csv\".\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nfull_tweet_data_clean.to_csv(\"twitter_archive_master.csv\")\nimage_predictions_clean.to_csv(\"image_predictions_master.csv\")\n```\n:::\n\n\n## Analyzing and Visualizing Data\n\nIn this section, analyze and visualize your wrangled data. You must produce at least **three (3) insights and one (1) visualization.**\n\nThe vast majority of rating ratios were centered between 1 and 1.25. The plot below was cut off at 2 because there are ouliers that fall on the far positive side of the plot.\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nplt.hist(full_tweet_data_clean.rating_numerator / full_tweet_data_clean.rating_denominator, bins=10, range=(0,2));\nplt.xlabel(\"Rating Ratio\");\nplt.ylabel(\"Tweets\");\nplt.title(\"Rating Ratio Distribution\");\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-54-output-1.png){}\n:::\n:::\n\n\nBased on the below plot, it appears that the favorite counts grew steadily over time, but also had an increase in variance along the y axis.\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nfig = full_tweet_data_clean.plot(x=\"timestamp\", y=\"favorite_count\", title=\"Favorite Counts Over Time\");\nfig.set_xlabel(\"Date\")\nfig.set_ylabel(\"Favorites\")\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\nText(0, 0.5, 'Favorites')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-55-output-2.png){}\n:::\n:::\n\n\nFrom the below plot, we can see that the vast majority of tweets were made from an iphone, and only a few were made from other sources such as TweetDeck, Twitter Web Client, and Vine.\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nfig = full_tweet_data_clean.source.value_counts().plot.barh(title=\"Tweet Sources\");\nfig.set_xlabel(\"Tweets\")\nfig.set_ylabel(\"Tweet Source\")\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\nText(0, 0.5, 'Tweet Source')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-56-output-2.png){}\n:::\n:::\n\n\n### Insights:\n\n1.  Most dog rating ratios were between 1 and 1.25 (numerator / denominator)\n\n2.  Over time, the favorite counts grew for each tweet on average and the variance of number of favorites each tweet go also seems to have increased over time.\n\n3.  The vast majority of tweets were made on an iPhone, but a few other sources were also used: TweetDeck, Twitter Web Client, and Vine.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}